/*
 * CodeGenAndTransformerAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package io.apimatic.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public enum Format {
    ENUM_API_BLUEPRINT, //TODO: Write general description for this element
    ENUM_GOOGLE_DISCOVERY, //TODO: Write general description for this element
    RAML, //TODO: Write general description for this element
    WADL, //TODO: Write general description for this element
    SWAGGER, //TODO: Write general description for this element
    ENUM_IO_DOCS, //TODO: Write general description for this element
    APIMATIC, //TODO: Write general description for this element
    WSDL, //TODO: Write general description for this element
    MASHAPE, //TODO: Write general description for this element
    POSTMAN, //TODO: Write general description for this element
    HAR, //TODO: Write general description for this element
    OPEN_API_SPEC_300_RC1; //TODO: Write general description for this element

    private static TreeMap<String, Format> valueMap = new TreeMap<String, Format>();
    private String value;

    static {
        ENUM_API_BLUEPRINT.value = "API Blueprint";
        ENUM_GOOGLE_DISCOVERY.value = "Google Discovery";
        RAML.value = "RAML";
        WADL.value = "WADL";
        SWAGGER.value = "Swagger";
        ENUM_IO_DOCS.value = "IO Docs";
        APIMATIC.value = "APIMATIC";
        WSDL.value = "WSDL";
        MASHAPE.value = "Mashape";
        POSTMAN.value = "Postman";
        HAR.value = "HAR";
        OPEN_API_SPEC_300_RC1.value = "OpenApi3";

        valueMap.put("API Blueprint", ENUM_API_BLUEPRINT);
        valueMap.put("Google Discovery", ENUM_GOOGLE_DISCOVERY);
        valueMap.put("RAML", RAML);
        valueMap.put("WADL", WADL);
        valueMap.put("Swagger", SWAGGER);
        valueMap.put("IO Docs", ENUM_IO_DOCS);
        valueMap.put("APIMATIC", APIMATIC);
        valueMap.put("WSDL", WSDL);
        valueMap.put("Mashape", MASHAPE);
        valueMap.put("Postman", POSTMAN);
        valueMap.put("HAR", HAR);
        valueMap.put("OpenApi3", OPEN_API_SPEC_300_RC1);
    }

    /**
     * Returns the enum member associated with the given string value
     * @return The enum member against the given string value */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static Format fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member
     * @return The string value against enum member */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of Format values to list of string values
     * @param toConvert The list of Format values to convert
     * @return List of representative string values */
    public static List<String> toValue(List<Format> toConvert) {
        if(toConvert == null)
            return null;
        List<String> convertedValues = new ArrayList<String>();
        for (Format enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 