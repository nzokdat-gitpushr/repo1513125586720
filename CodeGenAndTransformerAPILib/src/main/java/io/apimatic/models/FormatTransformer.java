/*
 * CodeGenAndTransformerAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package io.apimatic.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public enum FormatTransformer {
    APIMATIC, //TODO: Write general description for this element
    WADL2009, //TODO: Write general description for this element
    SWAGGER10, //TODO: Write general description for this element
    SWAGGER20, //TODO: Write general description for this element
    SWAGGERYAML, //TODO: Write general description for this element
    APIBLUEPRINT, //TODO: Write general description for this element
    RAML; //TODO: Write general description for this element

    private static TreeMap<String, FormatTransformer> valueMap = new TreeMap<String, FormatTransformer>();
    private String value;

    static {
        APIMATIC.value = "apimatic";
        WADL2009.value = "wadl2009";
        SWAGGER10.value = "swagger10";
        SWAGGER20.value = "swagger20";
        SWAGGERYAML.value = "swaggeryaml";
        APIBLUEPRINT.value = "apiblueprint";
        RAML.value = "raml";

        valueMap.put("apimatic", APIMATIC);
        valueMap.put("wadl2009", WADL2009);
        valueMap.put("swagger10", SWAGGER10);
        valueMap.put("swagger20", SWAGGER20);
        valueMap.put("swaggeryaml", SWAGGERYAML);
        valueMap.put("apiblueprint", APIBLUEPRINT);
        valueMap.put("raml", RAML);
    }

    /**
     * Returns the enum member associated with the given string value
     * @return The enum member against the given string value */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static FormatTransformer fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member
     * @return The string value against enum member */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of FormatTransformer values to list of string values
     * @param toConvert The list of FormatTransformer values to convert
     * @return List of representative string values */
    public static List<String> toValue(List<FormatTransformer> toConvert) {
        if(toConvert == null)
            return null;
        List<String> convertedValues = new ArrayList<String>();
        for (FormatTransformer enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 