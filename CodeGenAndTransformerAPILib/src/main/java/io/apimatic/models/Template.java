/*
 * CodeGenAndTransformerAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package io.apimatic.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public enum Template {
    CS_PORTABLE_NET_LIB, //TODO: Write general description for this element
    JAVA_ECLIPSE_JRE_LIB, //TODO: Write general description for this element
    JAVA_GRADLE_ANDROID_LIB, //TODO: Write general description for this element
    OBJC_COCOA_TOUCH_IOS_LIB, //TODO: Write general description for this element
    ANGULAR_JAVASCRIPT_LIB, //TODO: Write general description for this element
    RUBY_GENERIC_LIB, //TODO: Write general description for this element
    ENUM_PYTHON_GENERIC_LIB, //TODO: Write general description for this element
    ENUM_PHP_GENERIC_LIB, //TODO: Write general description for this element
    ENUM_NODE_JAVASCRIPT_LIB, //TODO: Write general description for this element
    ENUM_GO_GENERIC_LIB; //TODO: Write general description for this element

    private static TreeMap<String, Template> valueMap = new TreeMap<String, Template>();
    private String value;

    static {
        CS_PORTABLE_NET_LIB.value = "cs_portable_net_lib";
        JAVA_ECLIPSE_JRE_LIB.value = "java_eclipse_jre_lib";
        JAVA_GRADLE_ANDROID_LIB.value = "java_gradle_android_lib";
        OBJC_COCOA_TOUCH_IOS_LIB.value = "objc_cocoa_touch_ios_lib";
        ANGULAR_JAVASCRIPT_LIB.value = "angular_javascript_lib";
        RUBY_GENERIC_LIB.value = "ruby_generic_lib";
        ENUM_PYTHON_GENERIC_LIB.value = "python_generic_lib";
        ENUM_PHP_GENERIC_LIB.value = "php_generic_lib";
        ENUM_NODE_JAVASCRIPT_LIB.value = "node_javascript_lib";
        ENUM_GO_GENERIC_LIB.value = "go_generic_lib";

        valueMap.put("cs_portable_net_lib", CS_PORTABLE_NET_LIB);
        valueMap.put("java_eclipse_jre_lib", JAVA_ECLIPSE_JRE_LIB);
        valueMap.put("java_gradle_android_lib", JAVA_GRADLE_ANDROID_LIB);
        valueMap.put("objc_cocoa_touch_ios_lib", OBJC_COCOA_TOUCH_IOS_LIB);
        valueMap.put("angular_javascript_lib", ANGULAR_JAVASCRIPT_LIB);
        valueMap.put("ruby_generic_lib", RUBY_GENERIC_LIB);
        valueMap.put("python_generic_lib", ENUM_PYTHON_GENERIC_LIB);
        valueMap.put("php_generic_lib", ENUM_PHP_GENERIC_LIB);
        valueMap.put("node_javascript_lib", ENUM_NODE_JAVASCRIPT_LIB);
        valueMap.put("go_generic_lib", ENUM_GO_GENERIC_LIB);
    }

    /**
     * Returns the enum member associated with the given string value
     * @return The enum member against the given string value */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static Template fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member
     * @return The string value against enum member */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of Template values to list of string values
     * @param toConvert The list of Template values to convert
     * @return List of representative string values */
    public static List<String> toValue(List<Template> toConvert) {
        if(toConvert == null)
            return null;
        List<String> convertedValues = new ArrayList<String>();
        for (Template enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 